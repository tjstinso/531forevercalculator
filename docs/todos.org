#+Title: open issues
* bugs
1. start date isn't doing anything here.
2. [X] we should be able to choose up to 3 leaders.
3. [X] when exporting, it is not using the rounded numbers. 
* features
1. [X] as a user, i should be able to input either a 1rm or a training max for a lift.
   1. [X] currently, the aplication assumes that we're always inputting a 1rm
   2. [X] this choice should be a radio button and should be properly reflect by the ui
   3. [X] why does this matter? this may make more sense once we're in the midst of a long running program once we're working largely based off of our TM instead of a 1rm.
   4. the name input type isn't that satisfying here, but it works for now.
2. [X] users should be able to configure their TM % as a relationship to their 1 rep max.
   1. Currently, the underlying type allows for an input, but the program itself just defaults to 85%.
   2. [X] Users should be able to input a value in the range of 80-90%.
3. [X] As a user, I want to export my table to google sheets.
   1. [X] I should be able to choose if I want to export to a new sheet or append to an existing one.
   2. [X] in the case of a new spreadsheet, i should be able to designate a name
   3. [X] users should be able to view all available spreadsheets
      1. [X] can we scope this further such that we only look at spreadsheets associated to this application?
	 1. since we have to first query google drive then filter down on the spreadsheet api, this gets expensive. Using some normalized name of files would solve this but it is a little clunkier. I think this is an OK approach for our purposes.
   4. [X] if choosing an existing spreadsheet, we should auto-populate the training maxes from the last 7th week protocol
4. [X] there should be multiple sheets.
   1. [X] one that represents a complete history
   2. [X] one that represents the current training block
5. [-] The identity should be persisted across sessions.
   1. [X] ultimately this means we'll need a database. sqlite or some inmemory provider should be fine
   2. [X] we should be caching the token data retrieved by google
   3. [X] in the case of an expired user token, we should use the refresh token to get accesso
      1. [X] this should be done when the user is opening the website
      2. [X] it should be a non-blocking operation
      3. [X] it should be apparent to the user that the backend is performing some auth related action
   4. [ ] is this done securely?
	 
6. [X] when the application has the user credential, it should be reflected on the website itself. The login button shouldn't really appear.
   1. this has  been done to an extent, but the website now requires google based auth.
   2. Ideally, there should just be a header with a login button at the top of the page. Which would then reflect the users identity in the case that they're logged in.
7. [X] we should dockerize this guy so others can easily run it locally if they so desire
   1. alternatively, this could just be published as a website
8. [ ] create a readme.md indicating what this is about and how to run it lcoally
   1. [ ] what is this application about
      1. this is a 531 calculator that uses the 531 forever framework
      2. the application allows users to auth into google and persist their data to a spreadsheet.
      3. it is possible to reuse an existing spreadsheet
   2. [ ] how to run
      1. in its current state its really set up to be ran as a public website.
      2. to use it, a user needs to set up [[https://console.cloud.google.com][google api access]].
	 1. denote the required scopes
      3. denote the relevant environment variables
      4. denote how to build and run with docker compose
	    
	 
      
* nice to haves
1. create an actual UI
2. include more than google auth
